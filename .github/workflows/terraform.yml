name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  contents: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      # Run a terraform fmt for push and PR on non-main-branch
      - name: Terraform Format
        id: fmt
        if: github.ref != 'refs/head/main'
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      # Run a terraform validate for push and PR on non-main branch
      # Run if formating fails
      - name: Terraform Validate
        id: validate
        if: github.ref != 'refs/head/main' && (success() || failure())
        run: terraform validate -no-color

      # Update README.md
      - name: Render terraform docs inside the README.md and push changes back to PR branch
        uses: terraform-docs/gh-actions@main
        with:
          working-dir: .
          ouput-file: README.md
          output-method: inject
          git-push: "true"
          git-commit-message: 'Update README.md with terraform-docs'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Run a terraform plan for pull requests only
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      # Run Checkov
      - name: Checkov
        if: github.event_name == 'pull_request'
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./
          quiet: true # optional: display only failed checks
          # This will add both a CLI output to the console and create a results.sarif file
          output_format: cli,sarif
          output_file_path: console,results.sarif
          framework: terraform
          #soft_fail: true
          compact: true
          skip_check: CKV_AWS_8,CKV_AWS_79,CKV_AWS_126,CKV_AWS_135,CKV_AWS_23,CKV2_AWS_41

      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3
        
      #   # Results are generated only on a success or failure
      #   # this is required since GitHub by default won't run the next step
      #   # when the previous one has failed. Security checks that do not pass will 'fail'.
      #   # An alternative is to add `continue-on-error: true` to the previous step
      #   # Or 'soft_fail: true' to checkov.
      #   if: success() || failure()
      #   with:
      #     sarif_file: results.sarif

      - name: Run Trivy
        if: github.event_name == 'pull_request'
        id: trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          # scan-type: 'fs'
          # scan-ref: '.'
          # trivy-config: trivy.yaml
          format: table
          exit-code: 0
          ignore-unfixed: true
          scanners: vuln,secret,misconfig
          vuln-type: os,library
          severity: CRITICAL,HIGH # UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          version: "v0.57.1" # latest
          scan-type: config
          hide-progress: false # Suppress progress bar and log output
          output: trivy.txt

      - name: Run Terrascan
        if: github.event_name == 'pull_request'
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: terraform # helm, k8s, kustomize, terraform
          iac_dir: ./
          non_recursive: false
          iac_version: v14
          policy_type: all # aws, azure, gcp, github, k8s
          only_warn: true
          # skip_rules
          # sarif_upload

      - name: KICS
        if: github.event_name == 'pull_request'
        id: kics
        uses: checkmarx/kics-github-action@v2.1.5
        with:
          path: './main.tf'
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore_on_exit: results
          output_path: myResults/
          enable_comments: true
          bom: true
          
      # Display the KICS results in json format
      - name: display kics results
        if: github.event_name == 'pull_request'
        run: |
          cat myResults/results.json

      # - name: Run TFLint
      #   if: github.event_name == 'pull_request'
      #   id: tflint
      #   uses: terraform-linters/setup-tflint@v4
      #   with:
      #     tflint_version: latest
          
      # - name: TFLint Show Version
      #   run: tflint --version

      # - name: TFLint init
      #   run: tflint --init
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}

      # - name: TFLint Run
      #   run: tflint -f compact --recursive           
          

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && (success() || failure())
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Checkov üß™\`${{ steps.checkov.outcome }}\`
            #### Trivy üß™\`${{ steps.trivy.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            <details><summary>Show Checkov Results</summary>
            ${process.env.CHECKOV_RESULTS}

            </details>

            <details><summary>Show Trivy Results</summary>
            ${process.env.TRIVY_RESULTS}

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false


      # - name: checkov
      #     runs-on: ubuntu-latest
      #     permissions:
      #       contents: read # for actions/checkout to fetch code
      #       security-events: write # for GitHub/codeql-action/upload-sarif to upload SARIF results
      #     steps:
      #     - uses: actions/checkout@v3
      
      #     - name: Checkov GitHub Action
      #       uses: bridgecrewio/checkov-action@master
      #       with:
      #         directory: ./
      #         quiet: true # optional: display only failed checks
      #         # This will add both a CLI output to the console and create a results.sarif file
      #         output_format: cli,sarif
      #         output_file_path: console,results.sarif
      #         framework: terraform
      #         #soft_fail: true
      #         compact: true
            
      #     - name: Upload SARIF file
      #       uses: github/codeql-action/upload-sarif@v3
            
      #       # Results are generated only on a success or failure
      #       # this is required since GitHub by default won't run the next step
      #       # when the previous one has failed. Security checks that do not pass will 'fail'.
      #       # An alternative is to add `continue-on-error: true` to the previous step
      #       # Or 'soft_fail: true' to checkov.
      #       if: success() || failure()
      #       with:
      #         sarif_file: results.sarif
